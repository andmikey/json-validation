* JSON validation service
** What should it do?
*** Overview
- REST service
- Validating JSON documents against JSON schemas
- Upload schemas, store them at unique URI, then validate JSON documents against URIs
- Clean JSON before validation: remove keys for which value is null
- Written in Scala
*** Endpoints
| POST /schema/SCHEMAID   | Upload a JSON Schema with unique `SCHEMAID`                               |
| GET /schema/SCHEMAID    | Download a JSON Schema with unique `SCHEMAID`                             |
| POST /validate/SCHEMAID | Validate a JSON document against the JSON Schema identified by `SCHEMAID` |
*** Other requirements
- Restarting application has no effect on previously uploaded schemas
  - So, save to a database
- Exceptional cases should be handled
  - What makes an exceptional case?
- Unexpected requests (eg. invalid URIs) should be processed according to RESTful architecture
  - So, return status code + JSON
- Useful but not mentioned: test suite
** Planned approach
- Components
  - World: requests come from the outside world eg. using curl
  - Service: processes requests, validates requests, interacts with database
  - Database: stores and retrieves JSON schemas
    - Simple layout:
      #+BEGIN_SRC sql
CREATE TABLE jsonschemas (
schemaid varchar PRIMARY KEY,
json jsonb,
)
      #+END_SRC
      - Unique schemaid (primary key) associated with a JSON schema
      - Use PostgreSQL jsonb data type
      - Using PostgreSQL (rather than something simpler) allows for easily adding more fields
- How do components communicate?
  - World <-> Service <-> Database
  - World <-> Service
    - POST, GET requests
    - No requirement for PUT, DELETE
  - Service <-> Database
    - INSERT, SELECT commands
    - No requirement for UPDATE, DELETE
- Possible issues: what if....
  - The user wants to delete/update an existing schema?
  - The database is down?
*** Setting up database
This is Fedora-specific, based on https://developer.fedoraproject.org/tech/database/postgresql/about.html
#+BEGIN_SRC sh
# Install 
$ sudo dnf -y install postgresql postgresql-server
# Start service
$ sudo systemctl start postgresql
# Create a database
$ sudo su - postgres
$ createdb jsonapp --owner postgres
# Connect to the database
$ psql -d jsonapp
# Create the table
$ CREATE TABLE jsonschemas (schemaid varchar PRIMARY KEY, json varchar);
#+END_SRC

** TODOs
- [X] HTTP responses:
  - OK: 200
    - [X] Schema successfuly retrieved
    - [X] Document successfuly validated against schema
  - Created: 201
    - [X] Schema succesfully saved to database
  - Not found: 404
    - [X] Could not retrieve schema: does not exist
  - Internal server error: 500
    - [X] Document could not be validated against schema
    - [X] Schema could not be saved to database
- [-] Tests:
  - [ ] Valid schema upload
  - [ ] Invalid schema upload
    - [ ] JSON not valid
    - [ ] Already exists in database
  - [X] Successful validation
  - [X] Unsuccessful validation
  - [X] Successful retrieval
  - [X] Unsuccessful retrieval
- Fix JSON handling code
  - Seems to be behaving weirdly
** Resources
- [[https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming/671132#671123][What is RESTful programming?]]
- [[https://doc.akka.io/docs/akka-http/current/?language=scala][Akka HTTP]]
- [[http://scalatra.org/getting-started/first-project.html][Scalatra]]
- [[https://github.com/java-json-tools/json-schema-validator][Schema validator]]
